import { useState, useEffect } from 'react'
import { useAuth } from '../contexts/AuthContext'
import { Link } from 'react-router-dom'
import { 
  FileText, 
  Download, 
  Eye, 
  Plus, 
  Calendar,
  DollarSign,
  User,
  Building2,
  Filter,
  Search,
  MoreVertical,
  Edit,
  Trash2,
  Sparkles
} from 'lucide-react'
import axios from 'axios'
import toast from 'react-hot-toast'

const Proposals = () => {
  const { user } = useAuth()
  const [proposals, setProposals] = useState([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [statusFilter, setStatusFilter] = useState('all')
  const [selectedProposal, setSelectedProposal] = useState(null)
  const [showPreview, setShowPreview] = useState(false)

  useEffect(() => {
    fetchProposals()
  }, [])

  const fetchProposals = async () => {
    try {
      const response = await axios.get('/api/proposals')
      setProposals(response.data.proposals || [])
    } catch (error) {
      console.error('Error fetching proposals:', error)
      toast.error('Failed to load proposals')
    } finally {
      setLoading(false)
    }
  }

  const handleDownloadPDF = async (proposal) => {
    try {
      toast.loading('Generating PDF...', { id: 'pdf-generation' })
      
      // Use jsPDF to generate PDF
      const { jsPDF } = await import('jspdf')
      const doc = new jsPDF()
      
      // Set font
      doc.setFont('helvetica')
      
      // Add company header/logo area
      doc.setFillColor(34, 197, 94) // Green color
      doc.rect(0, 0, 210, 25, 'F')
      
      // Title
      doc.setFontSize(24)
      doc.setTextColor(255, 255, 255) // White text
      doc.text('FREELANCEFLOW PROPOSAL', 20, 18)
      
      // Reset text color
      doc.setTextColor(0, 0, 0)
      
      // Client info section
      doc.setFontSize(16)
      doc.setTextColor(34, 197, 94)
      doc.text('CLIENT INFORMATION', 20, 45)
      
      doc.setFontSize(12)
      doc.setTextColor(0, 0, 0)
      doc.text(`Client: ${proposal.client.name}`, 20, 60)
      if (proposal.client.company) {
        doc.text(`Company: ${proposal.client.company}`, 20, 70)
      }
      doc.text(`Email: ${proposal.client.email}`, 20, 80)
      doc.text(`Date: ${new Date(proposal.createdAt).toLocaleDateString()}`, 20, 90)
      
      // Project details section
      doc.setFontSize(16)
      doc.setTextColor(34, 197, 94)
      doc.text('PROJECT DETAILS', 20, 110)
      
      doc.setFontSize(12)
      doc.setTextColor(0, 0, 0)
      doc.text(`Budget: $${proposal.project.budget.amount.toLocaleString()}`, 20, 125)
      doc.text(`Timeline: ${proposal.project.timeline}`, 20, 135)
      doc.text(`Description: ${proposal.project.description.substring(0, 100)}...`, 20, 145)
      
      // Proposal content section
      doc.setFontSize(16)
      doc.setTextColor(34, 197, 94)
      doc.text('PROPOSAL CONTENT', 20, 165)
      
      doc.setFontSize(10)
      doc.setTextColor(0, 0, 0)
      
      // Split content into lines that fit the page
      const splitContent = doc.splitTextToSize(proposal.content, 170)
      let yPosition = 180
      
      splitContent.forEach((line, index) => {
        if (yPosition > 280) { // Check if we need a new page
          doc.addPage()
          yPosition = 20
        }
        doc.text(line, 20, yPosition)
        yPosition += 5
      })
      
      // Add footer
      const pageCount = doc.internal.getNumberOfPages()
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i)
        doc.setFontSize(8)
        doc.setTextColor(128, 128, 128)
        doc.text(`Page ${i} of ${pageCount}`, 20, 290)
        doc.text('Generated by FreelanceFlow', 150, 290)
      }
      
      // Save PDF
      const fileName = `proposal-${proposal.client.name.replace(/\s+/g, '-').toLowerCase()}-${new Date().toISOString().split('T')[0]}.pdf`
      doc.save(fileName)
      
      toast.success('PDF downloaded successfully!', { id: 'pdf-generation' })
    } catch (error) {
      console.error('Error generating PDF:', error)
      toast.error('Failed to generate PDF', { id: 'pdf-generation' })
    }
  }

  const handleViewProposal = (proposal) => {
    setSelectedProposal(proposal)
    setShowPreview(true)
  }

  const handleDeleteProposal = async (proposalId) => {
    if (!window.confirm('Are you sure you want to delete this proposal?')) return
    
    try {
      await axios.delete(`/api/proposals/${proposalId}`)
      setProposals(proposals.filter(p => p._id !== proposalId))
      toast.success('Proposal deleted successfully')
    } catch (error) {
      toast.error('Failed to delete proposal')
    }
  }

  const filteredProposals = proposals.filter(proposal => {
    const matchesSearch = proposal.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         proposal.client.name.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesStatus = statusFilter === 'all' || proposal.status === statusFilter
    return matchesSearch && matchesStatus
  })

  const getStatusColor = (status) => {
    switch (status) {
      case 'draft': return 'bg-gray-100 text-gray-800'
      case 'sent': return 'bg-blue-100 text-blue-800'
      case 'accepted': return 'bg-green-100 text-green-800'
      case 'rejected': return 'bg-red-100 text-red-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-500 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading proposals...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 flex items-center">
                <FileText className="h-8 w-8 text-green-500 mr-3" />
                My Proposals
              </h1>
              <p className="text-gray-600 mt-1">
                Manage and track your client proposals
              </p>
            </div>
            <Link
              to="/proposal-generator"
              className="inline-flex items-center px-6 py-3 bg-green-500 text-white rounded-xl hover:bg-green-600 transition-colors font-medium shadow-lg"
            >
              <Sparkles className="h-5 w-5 mr-2" />
              Generate New Proposal
            </Link>
          </div>
        </div>

        {/* Filters */}
        <div className="bg-white rounded-xl shadow-sm p-6 mb-6">
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="flex-1">
              <div className="relative">
                <Search className="h-5 w-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2" />
                <input
                  type="text"
                  placeholder="Search proposals..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                />
              </div>
            </div>
            <div className="sm:w-48">
              <select
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
              >
                <option value="all">All Status</option>
                <option value="draft">Draft</option>
                <option value="sent">Sent</option>
                <option value="accepted">Accepted</option>
                <option value="rejected">Rejected</option>
              </select>
            </div>
          </div>
        </div>

        {/* Proposals Grid */}
        {filteredProposals.length === 0 ? (
          <div className="bg-white rounded-xl shadow-sm p-12 text-center">
            <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              {proposals.length === 0 ? 'No proposals yet' : 'No proposals found'}
            </h3>
            <p className="text-gray-600 mb-6">
              {proposals.length === 0 
                ? 'Create your first AI-powered proposal to get started.'
                : 'Try adjusting your search or filter criteria.'
              }
            </p>
            {proposals.length === 0 && (
              <Link
                to="/proposal-generator"
                className="inline-flex items-center px-6 py-3 bg-green-500 text-white rounded-xl hover:bg-green-600 transition-colors font-medium"
              >
                <Sparkles className="h-5 w-5 mr-2" />
                Generate Your First Proposal
              </Link>
            )}
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredProposals.map((proposal) => (
              <div key={proposal._id} className="bg-white rounded-xl shadow-sm hover:shadow-md transition-shadow">
                <div className="p-6">
                  {/* Header */}
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex-1">
                      <h3 className="text-lg font-semibold text-gray-900 mb-1 line-clamp-2">
                        {proposal.title}
                      </h3>
                      <div className="flex items-center text-sm text-gray-600 mb-2">
                        <User className="h-4 w-4 mr-1" />
                        {proposal.client.name}
                      </div>
                      {proposal.client.company && (
                        <div className="flex items-center text-sm text-gray-600 mb-2">
                          <Building2 className="h-4 w-4 mr-1" />
                          {proposal.client.company}
                        </div>
                      )}
                    </div>
                    <div className="flex items-center gap-2">
                      {proposal.aiGenerated && (
                        <div className="p-1 bg-purple-100 rounded-lg">
                          <Sparkles className="h-4 w-4 text-purple-600" />
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Status */}
                  <div className="mb-4">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(proposal.status)}`}>
                      {proposal.status.charAt(0).toUpperCase() + proposal.status.slice(1)}
                    </span>
                  </div>

                  {/* Project Details */}
                  <div className="space-y-3 mb-6">
                    <div className="flex items-center text-sm text-gray-600">
                      <DollarSign className="h-4 w-4 mr-2 text-green-500" />
                      ${proposal.project.budget.amount.toLocaleString()}
                    </div>
                    <div className="flex items-center text-sm text-gray-600">
                      <Calendar className="h-4 w-4 mr-2 text-blue-500" />
                      {proposal.project.timeline}
                    </div>
                    <div className="flex items-center text-sm text-gray-600">
                      <Calendar className="h-4 w-4 mr-2 text-gray-400" />
                      Created {new Date(proposal.createdAt).toLocaleDateString()}
                    </div>
                  </div>

                  {/* Actions */}
                  <div className="flex items-center gap-2">
                    <button
                      onClick={() => handleViewProposal(proposal)}
                      className="flex-1 inline-flex items-center justify-center px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
                    >
                      <Eye className="h-4 w-4 mr-2" />
                      View
                    </button>
                    <button
                      onClick={() => handleDownloadPDF(proposal)}
                      className="flex-1 inline-flex items-center justify-center px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors"
                    >
                      <Download className="h-4 w-4 mr-2" />
                      Download PDF
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Preview Modal */}
        {showPreview && selectedProposal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
              <div className="flex items-center justify-between p-6 border-b">
                <h3 className="text-lg font-semibold text-gray-900">
                  Proposal Preview
                </h3>
                <div className="flex items-center gap-2">
                  <button
                    onClick={() => handleDownloadPDF(selectedProposal)}
                    className="inline-flex items-center px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors"
                  >
                    <Download className="h-4 w-4 mr-2" />
                    Download PDF
                  </button>
                  <button
                    onClick={() => setShowPreview(false)}
                    className="p-2 text-gray-400 hover:text-gray-600 transition-colors"
                  >
                    <span className="sr-only">Close</span>
                    ✕
                  </button>
                </div>
              </div>
              <div className="p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
                <div className="prose max-w-none">
                  <div className="mb-6">
                    <h1 className="text-2xl font-bold text-gray-900 mb-2">
                      {selectedProposal.title}
                    </h1>
                    <div className="flex items-center gap-6 text-sm text-gray-600 mb-4">
                      <div className="flex items-center">
                        <User className="h-4 w-4 mr-1" />
                        {selectedProposal.client.name}
                      </div>
                      {selectedProposal.client.company && (
                        <div className="flex items-center">
                          <Building2 className="h-4 w-4 mr-1" />
                          {selectedProposal.client.company}
                        </div>
                      )}
                      <div className="flex items-center">
                        <DollarSign className="h-4 w-4 mr-1" />
                        ${selectedProposal.project.budget.amount.toLocaleString()}
                      </div>
                    </div>
                  </div>
                  <div className="whitespace-pre-wrap text-gray-700 leading-relaxed">
                    {selectedProposal.content}
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

export default Proposals
